---
- name: AWS Scripting
  hosts: localhost
  connection: local
  # secrets.yml file stores aws credentials
  # varfile.yml stores required variables
  vars_files:
    - vars/varsfile.yml
    - vars/aws-creds.yml
  environment:
    - ansible_python_interpreter: /usr/bin/python3.8
    - AWS_ACCESS_KEY_ID: "{{ myuser }}"
    - AWS_SECRET_ACCESS_KEY: "{{ mykey }}"
  gather_facts: false

  tasks:

  - name: VPC block
    block:

    - name: Create VPC
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        region: "{{ region }}"
        cidr_block: "{{ cidr_block }}"
        state: present
      register: vpcinfo

    - name: Create VPC subnet-1
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpcinfo.vpc.id }}"
        region: "{{ region }}"
        cidr: "{{ subnet_cidr1 }}"
        az: "{{ subnet1_az }}"
        tags:
          Name: "{{ subnet_name }}"
        map_public: yes
      register: subnet1

    - name: Create VPC subnet-2
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpcinfo.vpc.id }}"
        region: "{{ region }}"
        cidr: "{{ subnet_cidr2 }}"
        az: "{{ subnet2_az }}"
        tags:
          Name: "{{ subnet_name }}"
        map_public: yes
      register: subnet2

    - name: create IGW
      ec2_vpc_igw:
        vpc_id: "{{ vpcinfo.vpc.id }}"
        region: "{{ region }}"
        state: present
        tags:
          Name: "{{ igw_name }}"
      register: igw
    
    - name: Route IGW
      ec2_vpc_route_table:
        vpc_id: "{{ vpcinfo.vpc.id }}"
        region: "{{ region }}"
        subnets:
          - "{{ subnet1.subnet.id }}"
          - "{{ subnet2.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id  }}"
        tags:
          Name: "{{ route_name }}"

    - name: create Security Group
      ec2_group:
        name: "{{ sg_group }}"
        description: Security Group
        vpc_id: "{{ vpcinfo.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: "{{ sg_name }}"
        rules:
          - proto: tcp
            ports:
            - 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 80
          - proto: tcp
            ports:
            - 443
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 443
          - proto: tcp
            ports:
            - 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 22
      register: sg
    tags: ['never', 'create-vpc']

  - name: Key-pair Block
    block:
    - name: Create a new EC2 key
      ec2_key:
         name: "{{ keyname }}"
         region: us-east-2
      register: ec2_key_result

    - name: Save private key
      copy: 
        content: "{{ ec2_key_result.key.private_key }}" 
        dest: "{{ keydir }}" 
        mode: 0600
      when: ec2_key_result.changed
    tags: ['never', 'create-key']

  - name: RDS Block
    block:

    - name: create RDS Security Group
      ec2_group:
        name: "{{ rds_sg_name }}"
        description: RDS Security Group
        vpc_id: "{{ vpcinfo.vpc.id }}"
        region: "{{ region }}"
        tags:
          Name: "{{ rds_sg_name }}"
        rules:
          # - proto: tcp
          #   ports:
          #   - 3306
          #   cidr_ip: 
          #   rule_desc: allow all on port 80
          - proto: tcp
            ports:
            - 3306
            group_id: "{{ sg.group_id }}"
            rule_desc: allow traffics from ec2
      register: rds_sg
    
    - name: RDS subnet Group
      rds_subnet_group:
        name: "{{ rds_subnet }}"
        state: present
        region: "{{ region }}"
        description: rds subnet group
        subnets:
          - "{{ subnet1.subnet.id }}"
          - "{{ subnet2.subnet.id }}"
      register: rds_subnet

    - name: Creating RDS
      rds_instance:
        state: present
        db_subnet_group_name: "{{ rds_subnet.subnet_group.name }}"
        vpc_security_group_ids: "{{ rds_sg.group_id }}"
        engine: "{{ db_engine }}"
        db_name: "{{ db_name }}"
        region: "{{ region }}"
        id: "{{ rds_name }}"
        allocated_storage: "{{ db_size }}"
        instance_type: db.t2.micro
        master_username: "{{ db_user }}"
        master_user_password: "{{ db_pass }}"
        port: 3306
#        multi_az: yes
        tags:
          Environment: wp
      register: rds_info

    - name: Giving aws info to wp-varsfile
      template:
        src: 'template/default,j2'
        dest: 'wp-deploy/vars/default.yml' 

    tags: ['never', 'create-rds']

  - name: EC2 Block
    block:
    - name: create ec2
      ec2:
        image: "{{ image_id }}"
        wait: yes
        region: "{{ region }}"
        instance_type: "{{ instance_type }}"
        group_id: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ subnet1.subnet.id }}"
        count_tag: "{{ count_tag }}"
        instance_tags:
            Name: "{{ instance_name }}"
        exact_count: "{{ ec2_no }}"
        key_name: "{{ keyname }}"
      register: ec2_new
    tags: ['never', 'create-ec2'] 

  - name: EC2 info block
    block:

    - name: Get Running instance Info
      ec2_instance_info:
        region: "{{ region }}"
        filters:
          "tag:Name": Wordpress
      register: ec2info

    - name: Print info
      debug: var="ec2info.instances"

    tags: ['always', 'get-info']
